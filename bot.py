from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)
from config import BOT_TOKEN
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os

# –®–∞–≥–∏ —Ñ–æ—Ä–º—ã
FULLNAME, RESIDENCE, PHONE = range(3)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("New Zealand", callback_data="New Zealand")],
        [InlineKeyboardButton("Australia", callback_data="Australia")],
        [InlineKeyboardButton("Canada", callback_data="Canada")]
    ]
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def country_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    country = query.data
    context.user_data['country'] = country
    await query.answer()

    stripe_url = "https://buy.stripe.com/test_examplelink"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π Stripe-—Å—Å—ã–ª–∫–∞
    keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Stripe", url=stripe_url)]]

    await query.edit_message_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {country}.\n\nüí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    await context.bot.send_message(chat_id=query.message.chat_id, text="–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /continue")

async def continue_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
    return FULLNAME

async def get_fullname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["fullname"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:")
    return RESIDENCE

async def get_residence(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["residence"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text

    fullname = context.user_data.get("fullname")
    residence = context.user_data.get("residence")
    phone = context.user_data.get("phone")
    country = context.user_data.get("country", "–ù–µ –≤—ã–±—Ä–∞–Ω–∞")

    message = (
        f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n"
        f"üåç –í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞: {country}\n"
        f"üë§ –§–ò–û: {fullname}\n"
        f"üè† –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {residence}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ email
    send_email(message)
    return ConversationHandler.END

def send_email(message: str):
    EMAIL_USER = os.getenv("EMAIL_USER")
    EMAIL_PASS = os.getenv("EMAIL_PASS")

    msg = MIMEMultipart()
    msg["From"] = EMAIL_USER
    msg["To"] = EMAIL_USER
    msg["Subject"] = "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç Telegram-–±–æ—Ç–∞"

    msg.attach(MIMEText(message, "plain"))

    with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
        server.login(EMAIL_USER, EMAIL_PASS)
        server.send_message(msg)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–§–æ—Ä–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
application = Application.builder().token(BOT_TOKEN).build()

form_conversation = ConversationHandler(
    entry_points=[CommandHandler("continue", continue_command)],
    states={
        FULLNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_fullname)],
        RESIDENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_residence)],
        PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(country_selected))
application.add_handler(form_conversation)

if __name__ == "__main__":
    application.run_polling()
